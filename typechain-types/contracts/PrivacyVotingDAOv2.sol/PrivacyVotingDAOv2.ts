/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PrivacyVotingDAOv2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "closeProposal"
      | "createProposal"
      | "getProposal"
      | "govToken"
      | "memberMerkleRoot"
      | "owner"
      | "proposalCount"
      | "renounceOwnership"
      | "tallies"
      | "transferOwnership"
      | "updateMemberRoot"
      | "verifier"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MemberRootUpdated"
      | "OwnershipTransferred"
      | "ProofVerified"
      | "ProposalClosed"
      | "ProposalCreated"
      | "VoteCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "closeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, string, BigNumberish, string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "govToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "memberMerkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tallies",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMemberRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "closeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "govToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memberMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tallies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMemberRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace MemberRootUpdatedEvent {
  export type InputTuple = [newRoot: BigNumberish];
  export type OutputTuple = [newRoot: bigint];
  export interface OutputObject {
    newRoot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofVerifiedEvent {
  export type InputTuple = [
    id: BigNumberish,
    merkleRoot: BigNumberish,
    nullifierHash: BigNumberish,
    signalHash: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    merkleRoot: bigint,
    nullifierHash: bigint,
    signalHash: bigint
  ];
  export interface OutputObject {
    id: bigint;
    merkleRoot: bigint;
    nullifierHash: bigint;
    signalHash: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalClosedEvent {
  export type InputTuple = [id: BigNumberish, winner: BigNumberish];
  export type OutputTuple = [id: bigint, winner: bigint];
  export interface OutputObject {
    id: bigint;
    winner: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    mode: BigNumberish,
    title: string,
    closes: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    mode: bigint,
    title: string,
    closes: bigint
  ];
  export interface OutputObject {
    id: bigint;
    mode: bigint;
    title: string;
    closes: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    id: BigNumberish,
    option: BigNumberish,
    nullifierHash: BigNumberish,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    option: bigint,
    nullifierHash: bigint,
    weight: bigint
  ];
  export interface OutputObject {
    id: bigint;
    option: bigint;
    nullifierHash: bigint;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivacyVotingDAOv2 extends BaseContract {
  connect(runner?: ContractRunner | null): PrivacyVotingDAOv2;
  waitForDeployment(): Promise<this>;

  interface: PrivacyVotingDAOv2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closeProposal: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  createProposal: TypedContractMethod<
    [
      title: string,
      description: string,
      mode: BigNumberish,
      options: string[],
      duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getProposal: TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, boolean, bigint, string[]] & {
        title: string;
        mode: bigint;
        open: boolean;
        closes: bigint;
        options: string[];
      }
    ],
    "view"
  >;

  govToken: TypedContractMethod<[], [string], "view">;

  memberMerkleRoot: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tallies: TypedContractMethod<
    [id: BigNumberish, start: BigNumberish, n: BigNumberish],
    [bigint[]],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMemberRoot: TypedContractMethod<
    [newRoot: BigNumberish],
    [void],
    "nonpayable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  vote: TypedContractMethod<
    [
      id: BigNumberish,
      option: BigNumberish,
      signalHash: BigNumberish,
      nullifierHash: BigNumberish,
      merkleRoot: BigNumberish,
      proof: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closeProposal"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      mode: BigNumberish,
      options: string[],
      duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [id: BigNumberish],
    [
      [string, bigint, boolean, bigint, string[]] & {
        title: string;
        mode: bigint;
        open: boolean;
        closes: bigint;
        options: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "govToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "memberMerkleRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tallies"
  ): TypedContractMethod<
    [id: BigNumberish, start: BigNumberish, n: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMemberRoot"
  ): TypedContractMethod<[newRoot: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [
      id: BigNumberish,
      option: BigNumberish,
      signalHash: BigNumberish,
      nullifierHash: BigNumberish,
      merkleRoot: BigNumberish,
      proof: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MemberRootUpdated"
  ): TypedContractEvent<
    MemberRootUpdatedEvent.InputTuple,
    MemberRootUpdatedEvent.OutputTuple,
    MemberRootUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProofVerified"
  ): TypedContractEvent<
    ProofVerifiedEvent.InputTuple,
    ProofVerifiedEvent.OutputTuple,
    ProofVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalClosed"
  ): TypedContractEvent<
    ProposalClosedEvent.InputTuple,
    ProposalClosedEvent.OutputTuple,
    ProposalClosedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;

  filters: {
    "MemberRootUpdated(uint256)": TypedContractEvent<
      MemberRootUpdatedEvent.InputTuple,
      MemberRootUpdatedEvent.OutputTuple,
      MemberRootUpdatedEvent.OutputObject
    >;
    MemberRootUpdated: TypedContractEvent<
      MemberRootUpdatedEvent.InputTuple,
      MemberRootUpdatedEvent.OutputTuple,
      MemberRootUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProofVerified(uint256,uint256,uint256,uint256)": TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
    ProofVerified: TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;

    "ProposalClosed(uint256,uint8)": TypedContractEvent<
      ProposalClosedEvent.InputTuple,
      ProposalClosedEvent.OutputTuple,
      ProposalClosedEvent.OutputObject
    >;
    ProposalClosed: TypedContractEvent<
      ProposalClosedEvent.InputTuple,
      ProposalClosedEvent.OutputTuple,
      ProposalClosedEvent.OutputObject
    >;

    "ProposalCreated(uint256,uint8,string,uint64)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "VoteCast(uint256,uint8,uint256,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
  };
}
