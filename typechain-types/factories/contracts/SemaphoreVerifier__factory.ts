/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SemaphoreVerifier,
  SemaphoreVerifierInterface,
} from "../../contracts/SemaphoreVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[8]",
        name: "proof",
        type: "uint256[8]",
      },
      {
        internalType: "uint256[4]",
        name: "publicSignals",
        type: "uint256[4]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610168806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632357251114610030575b600080fd5b61004a600480360381019061004591906100ba565b610060565b6040516100579190610117565b60405180910390f35b60006001905092915050565b600080fd5b600080fd5b60008190508260206008028201111561009257610091610071565b5b92915050565b6000819050826020600402820111156100b4576100b3610071565b5b92915050565b60008061018083850312156100d2576100d161006c565b5b60006100e085828601610076565b9250506101006100f285828601610098565b9150509250929050565b60008115159050919050565b610111816100fc565b82525050565b600060208201905061012c6000830184610108565b9291505056fea264697066735822122084735c8a3e1d5125f1df2d656348428f1f6093a6330c7d4b408b035750fa022164736f6c63430008180033";

type SemaphoreVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SemaphoreVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SemaphoreVerifier__factory extends ContractFactory {
  constructor(...args: SemaphoreVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SemaphoreVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SemaphoreVerifier__factory {
    return super.connect(runner) as SemaphoreVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SemaphoreVerifierInterface {
    return new Interface(_abi) as SemaphoreVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SemaphoreVerifier {
    return new Contract(address, _abi, runner) as unknown as SemaphoreVerifier;
  }
}
